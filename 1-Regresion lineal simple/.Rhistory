install.packages("caTools")
library(caTools)
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/Regresion lineal simple")
#import dataset
dataset = read.csv("Salary_Data.csv")
View(dataset)
View(dataset)
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
View(testing_set)
!lm
?lm
View(dataset)
#Ajustar el modelo de regresion lineal simple con el conjunto de entrenamiento
regresor=lm(formula = Salary ~ YearsExperience,
data = training_set)
View(regresor)
View(regresor)
summary(regresor)
#Ajustar el modelo de regresion lineal simple con el conjunto de entrenamiento
regressor=lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
#Predecir resultados con el conjunto de test
y_pred = predict(regressor, newdata = testing_set) # las columnas deben llamarse igual que en training set
y_pred
View(testing_set)
View(testing_set)
library(ggplot2)
ggplot2() +
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
colour="red")+
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)),
colour="blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)")+
xlab("Años de Experiencia")+
ylab("Sueldo ($)")
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
colour="red")+
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)),
colour="blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)")+
xlab("Años de Experiencia")+
ylab("Sueldo ($)")
ggplot() +
geom_point(aes(x=testing_set$YearsExperience, y=testing_set$Salary),
colour="red")+
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)), #Se puede dejar los datos de entrenamiento ya que es la misma recta
colour="blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Testeo)")+
xlab("Años de Experiencia")+
ylab("Sueldo ($)")
