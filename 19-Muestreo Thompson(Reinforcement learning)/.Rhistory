install.packages("caTools")
library(caTools)
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/18-Upper Confidence Bound(Reinforcement learning)")
#Import dataset
dataset = read.csv("Ads_CTR_Optimisation.csv")
View(dataset)
View(dataset)
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
total_rewards = 0
ads_selected = integer(N)
for(n in 1:N){
ad = 0
max_upper_bound = 0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward = sums_of_rewards[i]/number_of_selections[i]
delta_i = sqrt((3/2*log(n))/number_of_selections[i])
upper_bound = average_reward + delta_i
}
else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
reward = dataset[n, ad]
ads_selected[n] = ad
number_of_selections[i] = number_of_selections[i] + 1
sums_of_rewards[i] = sums_of_rewards[i] + reward
total_rewards = total_rewards + reward
}
#Visualizacion de los resultados
ads = c(1:10)
barplot(number_of_selections,
names.arg= ads,
xlab="Ads",
ylab="Frecuency of selection",
main="Best ads")
# Upper Confidence Bound
#Import dataset
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Upper Confidence Bound implementation
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
total_rewards = 0
ads_selected = integer(N)
for(n in 1:N){
ad = 0
max_upper_bound = 0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward = sums_of_rewards[i]/number_of_selections[i]
delta_i = sqrt((3/2*log(n))/number_of_selections[i])
upper_bound = average_reward + delta_i
}
else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
reward = dataset[n, ad]
ads_selected[ad] = ad
number_of_selections[ad] = number_of_selections[ad] + 1
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_rewards = total_rewards + reward
}
#Visualizacion de los resultados
ads = c(1:d)
barplot(number_of_selections,
names.arg= ads,
xlab="Ads",
ylab="Frecuency of selection",
main="Best ads")
barplot(number_of_selections,
names.arg= ads,
xlab="Ads",
ylab="Frecuency of selection",
col = "lightblue"
main="Best ads")
barplot(number_of_selections,
names.arg= ads,
xlab="Ads",
ylab="Frecuency of selection",
col = "lightblue",
main="Best ads")
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/19-Muestreo Thompson(Reinforcement learning)")
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/19-Muestreo Thompson(Reinforcement learning)")
dataset = read.csv("Ads_CTR_Optimisation.csv")
N = 10000
d = 10
number_of_selections = integer(d)
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
total_rewards = 0
ads_selected = integer(N)
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i] + 1,
shape2 = number_of_rewards_0[i] + 1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
reward = dataset[n, ad]
ads_selected[ad] = ad
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_rewards = total_rewards + reward
}
#Visualizacion de los resultados
ads = c(1:d)
barplot(number_of_selections,
names.arg= ads,
xlab="Ads",
ylab="Frecuency of selection",
col = "lightblue",
main="Best ads")
#Import dataset
dataset = read.csv("Ads_CTR_Optimisation.csv")
N = 10000
d = 10
number_of_selections = integer(d)
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
total_rewards = 0
ads_selected = integer(N)
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i] + 1,
shape2 = number_of_rewards_0[i] + 1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
reward = dataset[n, ad]
ads_selected[ad] = ad
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_rewards = total_rewards + reward
number_of_selections[ad] = number_of_selections[ad] + 1
}
#Visualizacion de los resultados
ads = c(1:d)
barplot(number_of_selections,
names.arg= ads,
xlab="Ads",
ylab="Frecuency of selection",
col = "lightblue",
main="Best ads")
