install.packages("caTools")
library(caTools)
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/20-Procesamiento de Lenguaje Natural")
#import dataset
dataset = read.csv("Restaurant_Reviews.tsv", sep="\t")
View(dataset)
View(dataset)
#import dataset
dataset = read.delim("Restaurant_Reviews.tsv")
View(dataset)
View(dataset)
#import dataset
dataset = read.delim("Restaurant_Reviews.tsv", quote='', stringsAsFactors = FALSE)
View(dataset)
View(dataset)
install.packages("tm")
# Limpieza del texto
library(tm)
??tm_map
corpus - tm_map(corpus, content_transformer(tolower))
corpus = VCorpus(VectorSource(dataset$Review))
corpus - tm_map(corpus, content_transformer(tolower))
# Limpieza del texto
library(tm)
corpus = VCorpus(VectorSource(dataset$Review))
corpus - tm_map(corpus, content_transformer(tolower))
as.character(corpus[[1]])
View(corpus)
corpus = tm_map(corpus, content_transformer(tolower))
as.character(corpus[[1]])
as.character(corpus[[841]])
# as.character(corpus[[1]]) consultar la primera poscicion del corpus
corpus = tm_map(corpus, removeNumbers)
as.character(corpus[[841]])
as.character(corpus[[1]])
corpus = tm_map(corpus, removePunctuation)
as.character(corpus[[1]])
corpus = tm_map(corpus, removeWords(stopwords(kind='en')))
corpus = tm_map(corpus, removeWords, stopwords(kind='en'))
as.character(corpus[[1]])
install.packages("SnowballC")
#import dataset
dataset = read.delim("Restaurant_Reviews.tsv", quote='', stringsAsFactors = FALSE)
# Limpieza del texto
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# as.character(corpus[[1]]) consultar la primera poscicion del corpus
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind='en'))
as.character(corpus[[1]])
#Stemming, eliminar dejar palabras raices
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[1]])
#Eliminar espacios adicionales
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
View(dtm)
View(dtm)
dtm
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.99)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
dtm
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
dtm
dtm = removeSparseTerms(dtm, 0.99999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
dtm
dtm = removeSparseTerms(dtm, 0.9999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
dtm
dtm = removeSparseTerms(dtm, 0.999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
dtm
#Converitr el dtm a dataframe
dataset = as.data.frame(as.matrix(dtm))
#Natural language processing
#import dataset
dataset_original = read.delim("Restaurant_Reviews.tsv", quote='', stringsAsFactors = FALSE)
# Limpieza del texto
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# as.character(corpus[[1]]) consultar la primera poscicion del corpus
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind='en'))
#Stemming, eliminar dejar palabras raices
corpus = tm_map(corpus, stemDocument)
#Eliminar espacios adicionales
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
View(dataset)
View(dataset)
View(dataset_original)
View(dataset_original)
#Converitr el dtm a dataframe
dataset_ = as.data.frame(as.matrix(dtm))
#A;adir la variable independiente al dataset
dataset$Liked = dataset_original$Liked
dataset_original = read.delim("Restaurant_Reviews.tsv", quote='', stringsAsFactors = FALSE)
# Limpieza del texto
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# as.character(corpus[[1]]) consultar la primera poscicion del corpus
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind='en'))
#Stemming, eliminar dejar palabras raices
corpus = tm_map(corpus, stemDocument)
#Eliminar espacios adicionales
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
#Converitr el dtm a dataframe
dataset_ = as.data.frame(as.matrix(dtm))
#A;adir la variable independiente al dataset
dataset$Liked = dataset_original$Liked
#CHOOSE A CLASIOFICATION ALGO
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
library(randomForest)
classifier = randomForest(formula = Liked ~ .,
n_tree = 100,
data = training_set)
y_pred = predict(classifier, newdata = testing_set[,-692])
#Crear la matriz de confusiones
cm = table(testing_set[,692], y_pred)
#Natural language processing
#import dataset
dataset_original = read.delim("Restaurant_Reviews.tsv", quote='', stringsAsFactors = FALSE)
# Limpieza del texto
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# as.character(corpus[[1]]) consultar la primera poscicion del corpus
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind='en'))
#Stemming, eliminar dejar palabras raices
corpus = tm_map(corpus, stemDocument)
#Eliminar espacios adicionales
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
#Converitr el dtm a dataframe
dataset = as.data.frame(as.matrix(dtm))
#A;adir la variable independiente al dataset
dataset$Liked = dataset_original$Liked
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
library(randomForest)
classifier = randomForest(formula = Liked ~ .,
n_tree = 100,
data = training_set)
y_pred = predict(classifier, newdata = testing_set[,-692])
#Crear la matriz de confusiones
cm = table(testing_set[,692], y_pred)
#Natural language processing
#import dataset
dataset_original = read.delim("Restaurant_Reviews.tsv", quote='', stringsAsFactors = FALSE)
# Limpieza del texto
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# as.character(corpus[[1]]) consultar la primera poscicion del corpus
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind='en'))
#Stemming, eliminar dejar palabras raices
corpus = tm_map(corpus, stemDocument)
#Eliminar espacios adicionales
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
#Converitr el dtm a dataframe
dataset = as.data.frame(as.matrix(dtm))
#A;adir la variable independiente al dataset
dataset$Liked = dataset_original$Liked
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
library(randomForest)
classifier = randomForest(formula = Liked ~ .,
n_tree = 100,
data = training_set)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
classifier = randomForest(training_set, Liked,
n_tree = 100)
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set)
View(dataset)
View(dataset)
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,690:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,500:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,400:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,100:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,200:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,300:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,400:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,500:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,450:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,470:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,420:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,420:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,410:692])
View(dataset)
View(dataset)
View(dataset)
View(dataset)
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,405:692])
classifier = randomForest(formula = Liked ~ .,
n_tree = 10,
data = training_set[,410:692])
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 100)
y_pred = predict(classifier, newdata = testing_set[,-692])
#Crear la matriz de confusiones
cm = table(testing_set[,692], y_pred)
cm
#Natural language processing
#import dataset
dataset_original = read.delim("Restaurant_Reviews.tsv", quote='', stringsAsFactors = FALSE)
# Limpieza del texto
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# as.character(corpus[[1]]) consultar la primera poscicion del corpus
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind='en'))
#Stemming, eliminar dejar palabras raices
corpus = tm_map(corpus, stemDocument)
#Eliminar espacios adicionales
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo de Bag of words
#dtm : document term matrix
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)#mantener el 99% de palabras que mas se repiten, el 1% desaparece
#Converitr el dtm a dataframe
dataset = as.data.frame(as.matrix(dtm))
#A;adir la variable independiente al dataset
dataset$Liked = dataset_original$Liked
#CHOOSE A CLASIOFICATION ALGO
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
library(randomForest)
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 100)
y_pred = predict(classifier, newdata = testing_set[,-692])
#Crear la matriz de confusiones
cm = table(testing_set[,692], y_pred)
cm
library(randomForest)
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 10)
y_pred = predict(classifier, newdata = testing_set[,-692])
#Crear la matriz de confusiones
cm = table(testing_set[,692], y_pred)
cm
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 50)
y_pred = predict(classifier, newdata = testing_set[,-692])
#Crear la matriz de confusiones
cm = table(testing_set[,692], y_pred)
cm
