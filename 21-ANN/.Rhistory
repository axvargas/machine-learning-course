install.packages("caTools")
library(caTools)
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/21-ANN")
#import dataset
dataset = read.csv("Churn_Modelling.csv")
View(dataset)
dataset = dataset[,4:14]
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
#import dataset
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#transforming categorical data
dataset$Geography=factor(dataset$Geography,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Gender=factor(dataset$Purchased,
levels=c("Female","Male"),
labels=c(0,1))
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#transforming categorical data
dataset$Geography=factor(dataset$Geography,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Gender=factor(dataset$Gender,
levels=c("Female","Male"),
labels=c(0,1))
View(dataset)
View(dataset)
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#transforming categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels=c("France","Spain","Germany"),
labels=c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels=c("Female","Male"),
labels=c(1,2)))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
#Scaling values
training_set[,1:10] = scale(training_set[,1:10])
testing_set[,1:10] = scale(testing_set[,1:10])
View(training_set)
View(training_set)
View(testing_set)
View(testing_set)
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#transforming categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels=c("France","Spain","Germany"),
labels=c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels=c("Female","Male"),
labels=c(1,2)))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
#Scaling values
training_set[,-11] = scale(training_set[,-11])
testing_set[,-11] = scale(testing_set[,-11])
View(testing_set)
View(testing_set)
install.packages("h2o")
#Crear la red neuronal
library(h2o)
h2o.init(nthreads = -1)
??deeplearning
#c(6,6,8,4) 4 capas ocultas con 6,6,8,4 nodos respectivamente
classifier = h2o.deeplearning(y = "Exited",
training_frame = training_set,
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
#c(6,6,8,4) 4 capas ocultas con 6,6,8,4 nodos respectivamente
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
#Prediccion deos resultados del conjunto de testing
#prob_pred = predict(classifier, type = "response", newdata = testing_set[,-3])#solo para logistica
#y_pred = ifelse(prob_pred > 0.5, 1, 0)
#para las demas
prob_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = ifelse(prob_pred > 0.5)
y_pred = as.vector(y_pred)
#Crear la matriz de confusiones
cm = table(testing_set[,11], y_pred)
cm
(1513+204)/2000
##CERRAR LA CONEXION CON EL SERVER DE H2O OJOOOOOOO
h2o.shutdown()
