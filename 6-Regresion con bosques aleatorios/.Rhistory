install.packages("caTools")
library(caTools)
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/Refresion con maquinas de soporte (SVR)")
install.packages("e1071")
# SVR
#import dataset
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[,2:3]
#divide dataset into training and testing
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split==TRUE)
# testing_set = subset(dataset, split==FALSE)
#Scaling values
#training_set[,2:3] = scale(training_set[,2:3])
#testing_set[,2:3] = scale(testing_set[,2:3])
#Ajustar el modelo de regresion n
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial")
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
# x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression,
newdata = data.frame(Level))),
colour="blue") +
ggtitle("Modelo de regresión (SVR)")+
xlab("Nivel del empleado")+
ylab("Sueldo ($)")
Visualizar la regresion
library(ggplot2)
# x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression,
newdata = dataset$Level)),
colour="blue") +
ggtitle("Modelo de regresión (SVR)")+
xlab("Nivel del empleado")+
ylab("Sueldo ($)")
#Visualizar la regresion
library(ggplot2)
# x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression,
newdata = dataset$Level)),
colour="blue") +
ggtitle("Modelo de regresión (SVR)")+
xlab("Nivel del empleado")+
ylab("Sueldo ($)")
#Visualizar la regresion
library(ggplot2)
# x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression,
newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión (SVR)")+
xlab("Nivel del empleado")+
ylab("Sueldo ($)")
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/Regresion con arboles de decision")
#import dataset
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[,2:3]
View(dataset)
View(dataset)
#Ajustar el modelo de regresion n
library(rpart)
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset)
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression, newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression, newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 2))
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression, newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
#Ajustar el modelo de regresion n
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 5))
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression, newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
#Ajustar el modelo de regresion n
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 0.5))
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression, newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
#Ajustar el modelo de regresion n
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 20))
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression, newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
#Ajustar el modelo de regresion n
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=dataset$Level,
y=predict(regression, newdata = dataset)),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=x_grid,
y=predict(regression, newdata = data.frame(Level = x_grid))),
colour="blue") +
ggtitle("Modelo de regresión conáarbol de decisión")+
xlab("Nivel de los empleados")+
ylab("Salario ($)")
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/Regresion con bosques aleatorios")
#import dataset
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[,2:3]
#import dataset
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[,2:3]
install.packages("randomForest")
#Ajustar el modelo de regresion n
library(randomForest)
library(randomForest)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Ajustar el modelo de regresion n
library(randomForest)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Ajustar el modelo de regresion n
library(randomForest)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 300)
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=x_grid,
y=predict(regression, newdata = data.frame(Level = x_grid))),
colour="blue") +
ggtitle("Modelo de regresión de bosques aleatorios")+
xlab("Nivel del empleado")+
ylab("Salario ($)")
#Ajustar el modelo de regresion n
library(randomForest)
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 300)
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=x_grid,
y=predict(regression, newdata = data.frame(Level = x_grid))),
colour="blue") +
ggtitle("Modelo de regresión de bosques aleatorios")+
xlab("Nivel del empleado")+
ylab("Salario ($)")
#Ajustar el modelo de regresion n
library(randomForest)
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
#Predecir resultados con el modelo de regresion lineal
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
#Visualizar la regresion
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01) # para suavizar la curva
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary),
colour="red") +
geom_line(aes(x=x_grid,
y=predict(regression, newdata = data.frame(Level = x_grid))),
colour="blue") +
ggtitle("Modelo de regresión de bosques aleatorios")+
xlab("Nivel del empleado")+
ylab("Salario ($)")
