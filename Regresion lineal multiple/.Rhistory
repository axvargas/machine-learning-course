install.packages("caTools")
library(caTools)
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Plantilla para el pre procesado de datos
#import dataset
dataset = read.csv("Data.csv")
#cleaning NAs
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#transforming categorical data
dataset$Country=factor(dataset$Country,
levels=c("France","Spain","Germany"),
labels=c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels=c("No","Yes"),
labels=c(0,1))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
setwd("A:/Asus/Documents/UDEMYCOURSES/Machine Learning A to Z/Practicas/Regresion lineal multiple")
# Regresion lineal multiple
#import dataset
dataset = read.csv("50_Startups.csv")
View(dataset)
View(dataset)
#transforming categorical data
dataset$Country=factor(dataset$State,
levels=c("New York","California","Florida"),
labels=c(1,2,3))
View(dataset)
View(dataset)
View(dataset)
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
View(training_set)
View(testing_set)
View(testing_set)
#Ajustar el modelo de Regresion Lineal Multiple en el conjunto de entrenamiento
regression = lm(formula = Profit ~ .,
data = training_set)
summary(regression)
View(dataset)
View(dataset)
# Regresion lineal multiple
#import dataset
dataset = read.csv("50_Startups.csv")
#transforming categorical data
dataset$State=factor(dataset$State,
levels=c("New York","California","Florida"),
labels=c(1,2,3))
#divide dataset into training and testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
#Ajustar el modelo de Regresion Lineal Multiple en el conjunto de entrenamiento
regression = lm(formula = Profit ~ .,
data = training_set)
summary(regression)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
#Predecir los resultados con el conjunto de testing
y_pred = predict(regression, newdata = testing_set)
y_pred
View(testing_set)
View(testing_set)
# Construir un modelo optimo con la eliminacion hacia atras
#Paso 1: Seleccionar un nivel de significancia para permanecer en el modelo
SL = 0.05
#Paso 2: Se calcula el modelo con todas las posibles variables predictoras
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset) # Se usa todo el conjunto para encontrar el mejor modelo
summary(regression)
#Paso 3 : Considera la variable predictora con el p-value mas grande.
#if p-value > SL : paso 4, else: FIN
#Paso 4 : Se elimina la variable predictora
#Paso 5: Se ajusta el modelo sin dicha variable
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
##
regression = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
##
regression = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regression)
coef(summary(regressor))[c(2:numVars)
coef(summary(regressionr))[c(2:numVars)
coef(summary(regression))[c(2:numVars)
asd
coef(summary(regression))[c(2:numVars)]
coef(summary(regression))
coef(summary(regression))[c(2:3)]
coef(summary(regression))[c(2:5)]
coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]
coef(summary(regression))[c(2:numVars), "Pr(>|t|)"]
coef(summary(regression))[c(2:3), "Pr(>|t|)"]
coef(summary(regression))[c(0:2), "Pr(>|t|)"]
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
#import dataset
dataset = read.csv("50_Startups.csv")
#transforming categorical data
dataset$State=factor(dataset$State,
levels=c("New York","California","Florida"),
labels=c(1,2,3))
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
View(dataset)
View(regression)
View(testing_set)
View(training_set)
# Regresion lineal multiple
backwardElimination_rsquared <- function(x, sl){
numVars = length(x)
colnames(temp) <- colnames(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
adjR_before = summary(regressor)$adj.r.squared
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x_copy = x
x = x[, -j]
tmp_regressor = lm(formula = Profit ~ ., data = x)
adjR_after = summary(tmp_regressor)$adj.r.squared
if (adjR_before >= adjR_after){
return(summary(regressor))
}
else{
numVars = numVars - 1
}
}
}
return(summary(regressor))
}
# Importar dataset
dataset <- read.csv('50_Startups.csv')
# Codificar datos categoricos
dataset$State <- factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination_rsquared(dataset, SL)
# Regresion lineal multiple
backwardElimination_rsquared <- function(x, sl){
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
adjR_before = summary(regressor)$adj.r.squared
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x_copy = x
x = x[, -j]
tmp_regressor = lm(formula = Profit ~ ., data = x)
adjR_after = summary(tmp_regressor)$adj.r.squared
if (adjR_before >= adjR_after){
return(summary(regressor))
}
else{
numVars = numVars - 1
}
}
}
return(summary(regressor))
}
# Importar dataset
dataset <- read.csv('50_Startups.csv')
# Codificar datos categoricos
dataset$State <- factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination_rsquared(dataset, SL)
